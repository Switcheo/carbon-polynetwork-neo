Neon {
  api: Object [Module] {
    neoCli: [Getter],
    neoscan: [Getter],
    neonDB: [Getter],
    notifications: [Getter],
    checkProperty: [Getter],
    modifyTransactionForEmptyTransaction: [Getter],
    extractDump: [Getter],
    getVerificationSignatureForSmartContract: [Getter],
    createClaimTx: [Getter],
    createContractTx: [Getter],
    createInvocationTx: [Getter],
    createStateTx: [Getter],
    fillUrl: [Getter],
    fillBalance: [Getter],
    fillSigningFunction: [Getter],
    fillClaims: [Getter],
    addAttributeForMintToken: [Getter],
    addSignatureForMintToken: [Getter],
    sendTx: [Getter],
    applyTxToBalance: [Getter],
    signTx: [Getter],
    signWithPrivateKey: [Getter],
    addAttributeIfExecutingAsSmartContract: [Getter],
    addSignatureIfExecutingAsSmartContract: [Getter],
    sendAsset: [Getter],
    claimGas: [Getter],
    doInvoke: [Getter],
    setupVote: [Getter],
    makeIntent: [Getter]
  },
  nep5: Object [Module] {
    abi: [Getter],
    getToken: [Getter],
    getTokens: [Getter],
    getTokenBalance: [Getter],
    getTokenBalances: [Getter]
  },
  settings: Object [Module] {
    networks: [Getter],
    defaultCalculationStrategy: [Getter],
    timeout: [Getter]
  },
  sc: Object [Module] {
    ContractParamType: [Getter],
    ContractParam: [Getter],
    likeContractParam: [Getter],
    createScript: [Getter],
    generateDeployScript: [Getter],
    ScriptBuilder: [Getter],
    StackItemType: [Getter],
    hasChildren: [Getter],
    StackItem: [Getter],
    OpCode: [Getter]
  },
  rpc: Object [Module] {
    Network: [Getter],
    Protocol: [Getter],
    queryRPC: [Getter],
    Query: [Getter],
    RPCClient: [Getter],
    buildParser: [Getter],
    NoOpParser: [Getter],
    IntegerParser: [Getter],
    StringParser: [Getter],
    Fixed8Parser: [Getter],
    SimpleParser: [Getter]
  },
  wallet: Object [Module] {
    Account: [Getter],
    Balance: [Getter],
    Claims: [Getter],
    getPublicKeyEncoded: [Getter],
    getPublicKeyUnencoded: [Getter],
    getPrivateKeyFromWIF: [Getter],
    getWIFFromPrivateKey: [Getter],
    getPublicKeyFromPrivateKey: [Getter],
    getVerificationScriptFromPublicKey: [Getter],
    getScriptHashFromPublicKey: [Getter],
    getAddressFromScriptHash: [Getter],
    getScriptHashFromAddress: [Getter],
    generateSignature: [Getter],
    generatePrivateKey: [Getter],
    encrypt: [Getter],
    decrypt: [Getter],
    isNEP2: [Getter],
    isWIF: [Getter],
    isPrivateKey: [Getter],
    isPublicKey: [Getter],
    isScriptHash: [Getter],
    isAddress: [Getter],
    curve: [Getter],
    sign: [Getter],
    verify: [Getter],
    AssetBalance: [Getter],
    ClaimItem: [Getter],
    Coin: [Getter],
    Wallet: [Getter],
    constructMultiSigVerificationScript: [Getter],
    getPublicKeysFromVerificationScript: [Getter],
    getSigningThresholdFromVerificationScript: [Getter],
    getSignaturesFromInvocationScript: [Getter]
  },
  CONST: Object [Module] {
    ADDR_VERSION: [Getter],
    ASSETS: [Getter],
    ASSET_ID: [Getter],
    ASSET_TYPE: [Getter],
    CONTRACTS: [Getter],
    DEFAULT_RPC: [Getter],
    DEFAULT_REQ: [Getter],
    DEFAULT_SCRYPT: [Getter],
    DEFAULT_SYSFEE: [Getter],
    DEFAULT_WALLET: [Getter],
    DEFAULT_ACCOUNT_CONTRACT: [Getter],
    NEO_NETWORK: [Getter],
    NEP_HEADER: [Getter],
    NEP_FLAG: [Getter],
    RPC_VERSION: [Getter],
    TX_VERSION: [Getter]
  },
  u: Object [Module] {
    isHex: [Getter],
    ensureHex: [Getter],
    hexXor: [Getter],
    reverseArray: [Getter],
    reverseHex: [Getter],
    ab2str: [Getter],
    str2ab: [Getter],
    hexstring2ab: [Getter],
    ab2hexstring: [Getter],
    str2hexstring: [Getter],
    hexstring2str: [Getter],
    int2hex: [Getter],
    num2hexstring: [Getter],
    num2fixed8: [Getter],
    fixed82num: [Getter],
    num2VarInt: [Getter],
    sha256: [Getter],
    ripemd160: [Getter],
    hash160: [Getter],
    hash256: [Getter],
    Fixed8: [Getter],
    StringStream: [Getter],
    generateRandomArray: [Getter]
  },
  tx: Object [Module] {
    TransactionAttribute: [Getter],
    TransactionInput: [Getter],
    TransactionOutput: [Getter],
    Witness: [Getter],
    StateType: [Getter],
    StateDescriptor: [Getter],
    BaseTransaction: [Getter],
    Transaction: [Getter],
    ClaimTransaction: [Getter],
    ContractTransaction: [Getter],
    InvocationTransaction: [Getter],
    StateTransaction: [Getter],
    MinerTransaction: [Getter],
    IssueTransaction: [Getter],
    RegisterTransaction: [Getter],
    TransactionType: [Getter],
    EnrollmentTransaction: [Getter],
    PublishTransaction: [Getter],
    smallestFirst: [Getter],
    biggestFirst: [Getter],
    balancedApproach: [Getter],
    TxAttrUsage: [Getter],
    defaultCalculationStrategy: [Getter]
  },
  logging: Object [Module] {
    setAll: [Getter],
    default: [Getter],
    logger: [Getter]
  },
  default: {
    sendAsset: [Function: sendAsset],
    claimGas: [Function: claimGas],
    doInvoke: [Function: doInvoke],
    setupVote: [Function: setupVote],
    create: {
      account: [Function: account],
      privateKey: [Function: generatePrivateKey],
      signature: [Function: generateSignature],
      wallet: [Function: wallet],
      claimTx: [Function: claimTx],
      contractTx: [Function: contractTx],
      invocationTx: [Function: invocationTx],
      stateTx: [Function: stateTx],
      contractParam: [Function: contractParam],
      script: [Function: createScript],
      scriptBuilder: [Function: scriptBuilder],
      deployScript: [Function: deployScript],
      rpcClient: [Function: rpcClient],
      query: [Function: query],
      network: [Function: network],
      stringStream: [Function: stringStream],
      fixed8: [Function: fixed8]
    },
    deserialize: {
      attribute: [Function: deserialize],
      input: [Function: deserialize],
      output: [Function: deserialize],
      script: [Function: deserialize],
      tx: [Function: deserialize]
    },
    is: {
      address: [Function: isAddress],
      publicKey: [Function: isPublicKey],
      encryptedKey: [Function: isNEP2],
      privateKey: [Function: isPrivateKey],
      wif: [Function: isWIF],
      scriptHash: [Function: isScriptHash]
    },
    sign: { hex: [Function: sign], message: [Function: message] },
    verify: { hex: [Function: verify], message: [Function: message] },
    encrypt: { privateKey: [Function: encrypt] },
    decrypt: { privateKey: [Function: decrypt] },
    add: { network: [Function: network] },
    remove: { network: [Function: network] },
    u: Object [Module] {
      isHex: [Getter],
      ensureHex: [Getter],
      hexXor: [Getter],
      reverseArray: [Getter],
      reverseHex: [Getter],
      ab2str: [Getter],
      str2ab: [Getter],
      hexstring2ab: [Getter],
      ab2hexstring: [Getter],
      str2hexstring: [Getter],
      hexstring2str: [Getter],
      int2hex: [Getter],
      num2hexstring: [Getter],
      num2fixed8: [Getter],
      fixed82num: [Getter],
      num2VarInt: [Getter],
      sha256: [Getter],
      ripemd160: [Getter],
      hash160: [Getter],
      hash256: [Getter],
      Fixed8: [Getter],
      StringStream: [Getter],
      generateRandomArray: [Getter]
    },
    CONST: Object [Module] {
      ADDR_VERSION: [Getter],
      ASSETS: [Getter],
      ASSET_ID: [Getter],
      ASSET_TYPE: [Getter],
      CONTRACTS: [Getter],
      DEFAULT_RPC: [Getter],
      DEFAULT_REQ: [Getter],
      DEFAULT_SCRYPT: [Getter],
      DEFAULT_SYSFEE: [Getter],
      DEFAULT_WALLET: [Getter],
      DEFAULT_ACCOUNT_CONTRACT: [Getter],
      NEO_NETWORK: [Getter],
      NEP_HEADER: [Getter],
      NEP_FLAG: [Getter],
      RPC_VERSION: [Getter],
      TX_VERSION: [Getter]
    }
  }
}
